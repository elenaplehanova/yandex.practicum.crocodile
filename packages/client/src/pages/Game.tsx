import React, { useState, useEffect } from 'react'
import { usePage } from '../hooks/usePage'
import WordCard from '../components/WordCard'
import ButtonBase from '../components/ButtonBase'
import { getRandomWord, getNextWord } from '../constants/gameWords'
import s from './Game.module.scss'

export const GamePage = () => {
  usePage({ initPage: initGamePage })

  const [currentWord, setCurrentWord] = useState<string>('')
  const [isWordRevealed, setIsWordRevealed] = useState<boolean>(false)
  const [inputWord, setInputWord] = useState<string>('')
  const [errorMessage, setErrorMessage] = useState<string>('')
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    const initialWord = getRandomWord()
    setCurrentWord(initialWord)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ª–æ–≤–∞
  const handleToggleWord = () => {
    setIsWordRevealed(!isWordRevealed)
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    setErrorMessage('')
    setIsCorrect(null)
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    setInputWord(value)
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ
    setErrorMessage('')
    setIsCorrect(null)
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞
  const handleCheckWord = () => {
    if (!inputWord.trim()) {
      setErrorMessage('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ')
      setIsCorrect(false)
      return
    }

    if (isWordRevealed) {
      setErrorMessage('–°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä–æ–π—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ')
      setIsCorrect(false)
      return
    }

    const isWordCorrect =
      inputWord.trim().toLowerCase() === currentWord.toLowerCase()

    if (isWordCorrect) {
      setIsCorrect(true)
      setErrorMessage('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É')
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        handleNextWord()
      }, 1500)
    } else {
      setIsCorrect(false)
      setErrorMessage('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ')
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –∏–Ω–ø—É—Ç–µ
  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleCheckWord()
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
  const handleNextWord = () => {
    const nextWord = getNextWord(currentWord)
    setCurrentWord(nextWord)
    setIsWordRevealed(false)
    setInputWord('')
    setErrorMessage('')
    setIsCorrect(null)
  }

  return (
    <div className={s.gamePage}>
      <div className={s.gameHeader}>
        <div className={s.crocodileIcon}>üêä</div>
        <h1 className={s.gameTitle}>–ö–†–û–ö–û–î–ò–õ</h1>
        <div className={s.gameSubtitle}>–ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞</div>
      </div>

      <div className={s.wordCardSection}>
        <WordCard
          word={currentWord}
          isRevealed={isWordRevealed}
          onToggle={handleToggleWord}
        />
      </div>

      <div className={s.inputSection}>
        <div className={s.inputContainer}>
          <input
            type="text"
            value={inputWord}
            onChange={handleInputChange}
            onKeyPress={handleKeyPress}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ..."
            className={s.wordInput}
            disabled={isWordRevealed}
          />
          <ButtonBase
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
            onClick={handleCheckWord}
            disabled={isWordRevealed || !inputWord.trim()}
          />
        </div>

        {errorMessage && (
          <div className={`${s.message} ${isCorrect ? s.success : s.error}`}>
            {errorMessage}
          </div>
        )}
      </div>

      <div className={s.gameControls}>
        <ButtonBase text="–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ" onClick={handleNextWord} />
      </div>
    </div>
  )
}

export const initGamePage = () => Promise.resolve()
